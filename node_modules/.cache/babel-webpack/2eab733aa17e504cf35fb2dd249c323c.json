{"ast":null,"code":"import _asyncToGenerator from \"E:/Proiecte/CookBook-Final/FrontEnd/cookbook/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as signalR from '@microsoft/signalr';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let ChatService = /*#__PURE__*/(() => {\n  class ChatService {\n    constructor(http) {\n      var _this = this;\n\n      this.http = http;\n      this.connection = new signalR.HubConnectionBuilder().withUrl(\"http://claudiuc.ddns.net:5000/chatsocket\") // mapping to the chathub as in startup.cs\n      .configureLogging(signalR.LogLevel.Information).build();\n      this.POST_URL = \"http://claudiuc.ddns.net:5000/api/chat/send\";\n      this.receivedMessageObject = {};\n      this.sharedObj = new Subject();\n      this.connection.onclose( /*#__PURE__*/_asyncToGenerator(function* () {\n        yield _this.start();\n      }));\n      this.connection.on(\"ReceiveOne\", (username, message, dateTime) => {\n        this.mapReceivedMessage(username, message, dateTime);\n      });\n      this.start();\n    }\n\n    start() {\n      var _this2 = this;\n\n      return _asyncToGenerator(function* () {\n        try {\n          yield _this2.connection.start();\n          console.log(\"connected\");\n        } catch (err) {\n          console.log(err);\n          setTimeout(() => _this2.start(), 5000);\n        }\n      })();\n    }\n\n    mapReceivedMessage(user, message, dateTime) {\n      this.receivedMessageObject.username = user;\n      this.receivedMessageObject.message = message;\n      this.receivedMessageObject.dateTime = dateTime;\n      this.sharedObj.next(this.receivedMessageObject);\n    }\n\n    broadcastMessage(msgDto) {\n      this.http.post(this.POST_URL, msgDto).subscribe(data => console.log(data));\n    }\n\n    retrieveMappedObject() {\n      return this.sharedObj.asObservable();\n    }\n\n    getMessageHistory() {\n      return this.http.get('http://claudiuc.ddns.net:5000/api/chat/getMessagesHistory');\n    }\n\n  }\n\n  ChatService.ɵfac = function ChatService_Factory(t) {\n    return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  ChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ChatService,\n    factory: ChatService.ɵfac,\n    providedIn: 'root'\n  });\n  return ChatService;\n})();","map":null,"metadata":{},"sourceType":"module"}