{"ast":null,"code":"import _asyncToGenerator from \"E:/Proiecte/CookBook/FrontEnd/cookbook/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport * as signalR from '@microsoft/signalr';\nimport { Subject } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChatService {\n  constructor(http) {\n    var _this = this;\n\n    this.http = http;\n    this.connection = new signalR.HubConnectionBuilder().withUrl(\"http://cookbook.ddns.net:5000/chatsocket\") // mapping to the chathub as in startup.cs\n    .configureLogging(signalR.LogLevel.Information).build();\n    this.POST_URL = \"http://cookbook.ddns.net:5000/api/chat/send\";\n    this.receivedMessageObject = {};\n    this.sharedObj = new Subject();\n    this.connection.onclose( /*#__PURE__*/_asyncToGenerator(function* () {\n      yield _this.start();\n    }));\n    this.connection.on(\"ReceiveOne\", (user, message) => {\n      this.mapReceivedMessage(user, message);\n    });\n    this.start();\n  } // Strart the connection\n\n\n  start() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      try {\n        yield _this2.connection.start();\n        console.log(\"connected\");\n      } catch (err) {\n        console.log(err);\n        setTimeout(() => _this2.start(), 5000);\n      }\n    })();\n  }\n\n  mapReceivedMessage(user, message) {\n    this.receivedMessageObject.user = user;\n    this.receivedMessageObject.msgText = message;\n    this.sharedObj.next(this.receivedMessageObject);\n  }\n  /* ****************************** Public Mehods **************************************** */\n  // Calls the controller method\n\n\n  broadcastMessage(msgDto) {\n    this.http.post(this.POST_URL, msgDto).subscribe(data => console.log(data)); // this.connection.invoke(\"SendMessage1\", msgDto.user, msgDto.msgText).catch(err => console.error(err));    // This can invoke the server method named as \"SendMethod1\" directly.\n  }\n\n  retrieveMappedObject() {\n    return this.sharedObj.asObservable();\n  }\n\n}\n\nChatService.ɵfac = function ChatService_Factory(t) {\n  return new (t || ChatService)(i0.ɵɵinject(i1.HttpClient));\n};\n\nChatService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: ChatService,\n  factory: ChatService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["E:\\Proiecte\\CookBook\\FrontEnd\\cookbook\\src\\app\\services\\chat.service.ts"],"names":[],"mappings":";AACA,OAAO,KAAK,OAAZ,MAAyB,oBAAzB;AAEA,SAAqB,OAArB,QAAoC,MAApC;;;AAMA,OAAM,MAAO,WAAP,CAAkB;AAUtB,EAAA,WAAA,CAAoB,IAApB,EAAoC;AAAA;;AAAhB,SAAA,IAAA,GAAA,IAAA;AARV,SAAA,UAAA,GAAkB,IAAI,OAAO,CAAC,oBAAZ,GAAmC,OAAnC,CAA2C,0CAA3C,EAAyF;AAAzF,KACY,gBADZ,CAC6B,OAAO,CAAC,QAAR,CAAiB,WAD9C,EAEY,KAFZ,EAAlB;AAGA,SAAA,QAAA,GAAW,6CAAX;AAEF,SAAA,qBAAA,GAAoC,EAApC;AACA,SAAA,SAAA,GAAY,IAAI,OAAJ,EAAZ;AAGN,SAAK,UAAL,CAAgB,OAAhB,iCAAwB,aAAW;AACjC,YAAM,KAAI,CAAC,KAAL,EAAN;AACD,KAFD;AAGD,SAAK,UAAL,CAAgB,EAAhB,CAAmB,YAAnB,EAAiC,CAAC,IAAD,EAAe,OAAf,KAAkC;AAAG,WAAK,kBAAL,CAAwB,IAAxB,EAA8B,OAA9B;AAAyC,KAA/G;AACA,SAAK,KAAL;AACA,GAhBqB,CAmBtB;;;AACa,EAAA,KAAK,GAAA;AAAA;;AAAA;AAChB,UAAI;AACF,cAAM,MAAI,CAAC,UAAL,CAAgB,KAAhB,EAAN;AACA,QAAA,OAAO,CAAC,GAAR,CAAY,WAAZ;AACD,OAHD,CAGE,OAAO,GAAP,EAAY;AACZ,QAAA,OAAO,CAAC,GAAR,CAAY,GAAZ;AACA,QAAA,UAAU,CAAC,MAAM,MAAI,CAAC,KAAL,EAAP,EAAqB,IAArB,CAAV;AACD;AAPe;AAQjB;;AAEO,EAAA,kBAAkB,CAAC,IAAD,EAAe,OAAf,EAA8B;AACtD,SAAK,qBAAL,CAA2B,IAA3B,GAAkC,IAAlC;AACA,SAAK,qBAAL,CAA2B,OAA3B,GAAqC,OAArC;AACA,SAAK,SAAL,CAAe,IAAf,CAAoB,KAAK,qBAAzB;AACF;AAEA;AAEA;;;AACO,EAAA,gBAAgB,CAAC,MAAD,EAAY;AACjC,SAAK,IAAL,CAAU,IAAV,CAAe,KAAK,QAApB,EAA8B,MAA9B,EAAsC,SAAtC,CAAgD,IAAI,IAAI,OAAO,CAAC,GAAR,CAAY,IAAZ,CAAxD,EADiC,CAEjC;AACD;;AAEM,EAAA,oBAAoB,GAAA;AACzB,WAAO,KAAK,SAAL,CAAe,YAAf,EAAP;AACD;;AA9CqB;;;mBAAX,W,EAAW,EAAA,CAAA,QAAA,CAAA,EAAA,CAAA,UAAA,C;AAAA,C;;;SAAX,W;AAAW,EAAA,OAAA,EAAX,WAAW,CAAA,I;AAAA,EAAA,UAAA,EAFV","sourcesContent":["import { Injectable, OnInit } from '@angular/core';\nimport * as signalR from '@microsoft/signalr';         \nimport { HttpClient } from '@angular/common/http';\nimport { Observable, Subject } from 'rxjs';\nimport { MessageDto } from '../models/chat-models';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ChatService {\n\n   private  connection: any = new signalR.HubConnectionBuilder().withUrl(\"http://cookbook.ddns.net:5000/chatsocket\")   // mapping to the chathub as in startup.cs\n                                         .configureLogging(signalR.LogLevel.Information)\n                                         .build();\n   readonly POST_URL = \"http://cookbook.ddns.net:5000/api/chat/send\"\n\n  private receivedMessageObject: MessageDto = {} as MessageDto;\n  private sharedObj = new Subject<MessageDto>();\n\n  constructor(private http: HttpClient) { \n    this.connection.onclose(async () => {\n      await this.start();\n    });\n   this.connection.on(\"ReceiveOne\", (user: string, message: string) => { this.mapReceivedMessage(user, message); });\n   this.start();                 \n  }\n\n\n  // Strart the connection\n  public async start() {\n    try {\n      await this.connection.start();\n      console.log(\"connected\");\n    } catch (err) {\n      console.log(err);\n      setTimeout(() => this.start(), 5000);\n    } \n  }\n\n  private mapReceivedMessage(user: string, message: string): void {\n    this.receivedMessageObject.user = user;\n    this.receivedMessageObject.msgText = message;\n    this.sharedObj.next(this.receivedMessageObject);\n }\n\n  /* ****************************** Public Mehods **************************************** */\n\n  // Calls the controller method\n  public broadcastMessage(msgDto: any) {\n    this.http.post(this.POST_URL, msgDto).subscribe(data => console.log(data));\n    // this.connection.invoke(\"SendMessage1\", msgDto.user, msgDto.msgText).catch(err => console.error(err));    // This can invoke the server method named as \"SendMethod1\" directly.\n  }\n\n  public retrieveMappedObject(): Observable<MessageDto> {\n    return this.sharedObj.asObservable();\n  }\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}